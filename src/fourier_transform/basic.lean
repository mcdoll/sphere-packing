import japanese_bracket
import analysis.schwartz_space

noncomputable theory

open_locale big_operators nnreal filter topological_space ennreal schwartz_space

open asymptotics filter set real measure_theory finite_dimensional 

variables {E F : Type*}

namespace schwartz_map

variables [normed_add_comm_group E] [normed_space ‚Ñù E] [finite_dimensional ‚Ñù E]
variables [measure_space E] [borel_space E] [(@volume E _).is_add_haar_measure]
variables [normed_add_comm_group F] [normed_space ‚Ñù F] 

@[protected, measurability] lemma ae_strongly_measurable (f : ùì¢(E, F)) : ae_strongly_measurable (f : E ‚Üí F) volume :=
f.continuous.ae_strongly_measurable

lemma one_add_pow_smul_le (f : ùì¢(E, F)) (x : E) (n : ‚Ñï): ‚à•(1 + ‚à•x‚à•) ^ n ‚Ä¢ f x‚à• ‚â§
  ‚àë (m : ‚Ñï) in finset.range (n + 1), (n.choose m : ‚Ñù) * (schwartz_map.seminorm ‚Ñù m 0) f :=
begin
  rw add_comm,
  rw add_pow,
  rw finset.sum_smul,
  simp only [one_pow, mul_one],
  refine (norm_sum_le (finset.range (n + 1)) _).trans _,
  refine finset.sum_le_sum (Œª m hm, _),
  rw mul_comm,
  simp only [‚Üêsmul_smul, norm_smul, norm_coe_nat, norm_pow, norm_norm],
  exact mul_le_mul_of_nonneg_left (f.norm_pow_mul_le_seminorm ‚Ñù _ _) (by positivity),
end

/-- To be generalized to all p -/
@[protected] lemma mem_‚Ñíp_one (f : ùì¢(E, F)) : mem_‚Ñíp (f : E ‚Üí F) 1 volume :=
begin
  have hr : (finrank ‚Ñù E : ‚Ñù) < finrank ‚Ñù E + 1 := lt_add_one (finrank ‚Ñù E), 
  have h := mem_‚Ñíp_rpow_neg_one_add_norm hr,
  let c := ‚àë (m : ‚Ñï) in finset.range ((finrank ‚Ñù E + 1) + 1),
    ((finrank ‚Ñù E + 1).choose m : ‚Ñù) * (schwartz_map.seminorm ‚Ñù m 0) f,
  have h' : ‚àÄ x : E, ‚à•f x‚à• ‚â§ c * ‚à•(1 + ‚à•x‚à•) ^ -((finrank ‚Ñù E : ‚Ñù) + 1)‚à• :=
  begin
    intros x,
    have hpos : 0 < 1 + ‚à•x‚à• := by positivity,
    rw ‚Üêone_smul ‚Ñù (f x),
    nth_rewrite 0 ‚Üêreal.rpow_zero (1 + ‚à•x‚à•),
    rw ‚Üêsub_self ((finrank ‚Ñù E : ‚Ñù) + 1),
    rw sub_eq_neg_add,
    rw real.rpow_add hpos,
    rw ‚Üêsmul_smul,
    rw norm_smul,
    rw mul_comm,
    refine mul_le_mul_of_nonneg_right _ (by positivity),
    norm_cast,
    exact one_add_pow_smul_le _ _ _,
  end,
  exact h.of_le_mul (by measurability) (ae_of_all _ h'),
end

@[protected] lemma integrable (f : ùì¢(E, F)) : integrable (f : E ‚Üí F) :=
begin
  rw ‚Üêmem_‚Ñíp_one_iff_integrable,
  exact f.mem_‚Ñíp_one,
end

end schwartz_map

section fourier_transform_aux

variables [inner_product_space ‚Ñù E]
variables [normed_add_comm_group F] [normed_space ‚Ñù F] [complete_space F] [finite_dimensional ‚Ñù F]
variables [has_smul ‚ÑÇ F]

lemma complex.differentiable_at_coe {f : E ‚Üí ‚Ñù} {x : E} (hf : differentiable_at ‚Ñù f x) :
  differentiable_at ‚Ñù (Œª y, (f y : ‚ÑÇ)) x :=
complex.of_real_clm.differentiable_at.comp _ hf

lemma complex.differentiable_coe {f : E ‚Üí ‚Ñù} (hf : differentiable ‚Ñù f) :
  differentiable ‚Ñù (Œª x, (f x : ‚ÑÇ)) :=
complex.of_real_clm.differentiable.comp hf

lemma complex.fderiv_coe {f : E ‚Üí ‚Ñù} {y : E} (hf : differentiable_at ‚Ñù f y) :
  fderiv ‚Ñù (Œª x, (f x : ‚ÑÇ)) y = complex.of_real_clm.comp (fderiv ‚Ñù f y) :=
begin
  change fderiv ‚Ñù (Œª x, complex.of_real_clm (f x)) y = complex.of_real_clm.comp (fderiv ‚Ñù f y),
  convert fderiv.comp _ complex.of_real_clm.differentiable_at hf,
  exact complex.of_real_clm.fderiv.symm,
end

lemma complex.fderiv_exp {f : E ‚Üí ‚ÑÇ} {x : E} (hc : differentiable_at ‚Ñù f x) :
  fderiv ‚Ñù (Œª x, complex.exp (f x)) x = complex.exp (f x) ‚Ä¢ (fderiv ‚Ñù f x) :=
hc.has_fderiv_at.cexp.fderiv

lemma inner_differentiable_at {y : E} {z : E} : differentiable_at ‚Ñù (Œª x, @inner ‚Ñù _ _ y x) z :=
(@innerSL ‚Ñù _ _ _ y).differentiable_at

lemma inner_differentiable {y : E} : differentiable ‚Ñù (Œª x, @inner ‚Ñù _ _ y x) :=
(@innerSL ‚Ñù _ _ _ y).differentiable

lemma fderiv_inner {y x‚ÇÄ : E} : fderiv ‚Ñù (Œª x, @inner ‚Ñù _ _ y x) x‚ÇÄ = innerSL y :=
(@innerSL ‚Ñù _ _ _ y).fderiv

lemma fderiv_exp_inner_left (x‚ÇÄ Œæ : E) : fderiv ‚Ñù (Œª x, complex.exp (- complex.I * @inner ‚Ñù _ _ x Œæ)) x‚ÇÄ =
  (complex.exp (-complex.I * (@inner ‚Ñù _ _ x‚ÇÄ Œæ)) * -complex.I) ‚Ä¢ complex.of_real_clm.comp (innerSL Œæ) :=
begin
  have hdiff_inner : differentiable_at ‚Ñù (Œª (x : E), ‚Üë(inner Œæ x)) x‚ÇÄ :=
  (complex.differentiable_coe inner_differentiable).differentiable_at,
  have hdiff_inner' : differentiable_at ‚Ñù (Œª (x : E), -complex.I * ‚Üë(inner Œæ x)) x‚ÇÄ :=
  differentiable_at.const_mul hdiff_inner _,
  --((complex.differentiable_coe inner_differentiable).const_mul _).differentiable_at,
  simp_rw real_inner_comm,
  rw complex.fderiv_exp hdiff_inner',
  rw fderiv_const_mul hdiff_inner,
  rw complex.fderiv_coe inner_differentiable_at,
  rw fderiv_inner,
  rw ‚Üêmul_smul,
  simp only [real_inner_comm x‚ÇÄ Œæ],
  /-simp_rw real_inner_comm,
  rw ‚Üêfderiv_exp_inner_left Œæ‚ÇÄ x,
  congr,
  ext1,
  rw real_inner_comm,-/
end

lemma fderiv_exp_inner_right (Œæ‚ÇÄ x : E) : fderiv ‚Ñù (Œª Œæ, complex.exp (- complex.I * @inner ‚Ñù _ _ x Œæ)) Œæ‚ÇÄ =
  (complex.exp (-complex.I * (@inner ‚Ñù _ _ x Œæ‚ÇÄ)) * -complex.I) ‚Ä¢ complex.of_real_clm.comp (innerSL x) :=
begin
  have hdiff_inner : differentiable_at ‚Ñù (Œª (Œæ : E), ‚Üë(inner x Œæ)) Œæ‚ÇÄ :=
  (complex.differentiable_coe inner_differentiable).differentiable_at,
  have hdiff_inner' : differentiable_at ‚Ñù (Œª (Œæ : E), -complex.I * ‚Üë(inner x Œæ)) Œæ‚ÇÄ :=
  differentiable_at.const_mul hdiff_inner _,
  rw complex.fderiv_exp hdiff_inner',
  rw fderiv_const_mul hdiff_inner,
  rw complex.fderiv_coe inner_differentiable_at,
  rw fderiv_inner,
  rw ‚Üêmul_smul,
end

end fourier_transform_aux

.

section normedC

variables [inner_product_space ‚Ñù E]
variables [normed_add_comm_group F] [normed_space ‚Ñù F] [complete_space F] [finite_dimensional ‚Ñù F]
variables [normed_space ‚ÑÇ F]

variables (c : ‚ÑÇ)

def innerSL_mul (f : ùì¢(E, F)) : ùì¢(E, E ‚ÜíL[‚Ñù] F) :=
{ to_fun := Œª x, ((@continuous_linear_map.lsmul ‚Ñù F _ _ _ ‚Ñù _ _ _ _).flip (f x)).comp (innerSL x),
  -- not clear whether this is the correct definition
  smooth' := sorry,
  decay' := sorry,
}

variables (x : E) (f : ùì¢(E, F)) (g : ùì¢(E, E‚ÜíL[‚Ñù] F))

#check c ‚Ä¢ g

#check complex.of_real_clm.comp (innerSL x)
#check f x
#check ((@continuous_linear_map.lsmul ‚Ñù F _ _ _ ‚Ñù _ _ _ _).flip (f x)).comp (innerSL x)
#check (@continuous_linear_map.lsmul ‚ÑÇ F _ _ _ ‚ÑÇ _ _ _ _).flip (f x)--F ‚ÜíL[‚Ñù] ‚Ñù ‚ÜíL[‚Ñù] F)


#check Œª y, complex.of_real_clm.comp (innerSL x) y ‚Ä¢ f x

end normedC

#exit

variables [measure_space E] --[borel_space E] [(@volume E _).is_add_haar_measure]

/-- The Fourier transform -/
def fourier_transform_aux (f : E ‚Üí F) (Œæ : E) : F :=
  (2 * real.pi)^(-(finrank ‚Ñù E : ‚Ñù) / 2) ‚Ä¢ ‚à´ x, complex.exp (- complex.I * (@inner ‚Ñù _ _ x Œæ)) ‚Ä¢ f x

def fourier_transform (f : ùì¢(E, F)) : ùì¢(E, F) :=
  { to_fun := fourier_transform_aux f,
    smooth' := begin
      rw cont_diff_top,
      intro n,
      sorry,
    end,
    decay' := begin
      intros k n,
      sorry,
    end }


end fourier_transform
